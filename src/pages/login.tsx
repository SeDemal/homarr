import {
  Anchor,
  Button,
  Card,
  Center,
  PasswordInput,
  Stack,
  Text,
  TextInput,
  Title,
} from '@mantine/core';
import { useForm, zodResolver } from '@mantine/form';
import { NotificationProps, showNotification } from '@mantine/notifications';
import { IconX } from '@tabler/icons';
import type { GetServerSideProps, InferGetServerSidePropsType, NextPage } from 'next';
import { signIn } from 'next-auth/react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useRef } from 'react';
import { ILogin, loginSchema } from '../validation/auth';
import { loginNamespaces } from '../tools/server/translation-namespaces';
import { getInputPropsMiddleware } from '../tools/getInputPropsMiddleware';
import { getServerSideTranslations } from '../tools/server/getServerSideTranslations';
import { getServerAuthSession } from '../server/auth';

const Login: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ errorType }) => {
  const router = useRouter();
  const { onSubmit, getInputProps } = useForm<ILogin>({
    validate: zodResolver(loginSchema),
  });
  usePageLoadNotification({
    enabled: !!errorType,
    title: 'Login failed',
    message: 'Please provide correct login informations',
    color: 'red',
    icon: <IconX size={16} />,
  });

  const handleSubmit = async (data: ILogin) => {
    try {
      await signIn('credentials', { ...data });
      router.push('/dashboard');
    } catch (e) {
      /* empty */
    }
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Center h="100vh">
        <Card p="lg" w="100%" maw="420px" withBorder>
          <form onSubmit={onSubmit(handleSubmit)}>
            <Stack>
              <Stack align="center">
                <Title>Welcome back!</Title>
                <Text color="dimmed" size="sm">
                  Please login to view your dashboards
                </Text>
              </Stack>

              <TextInput
                {...getInputPropsMiddleware(getInputProps('username'))}
                withAsterisk
                label="Username"
              />
              <PasswordInput
                {...getInputPropsMiddleware(getInputProps('password'))}
                withAsterisk
                label="Password"
              />

              <Button fullWidth type="submit">
                Login
              </Button>
              <Anchor color="dimmed" align="center" component="button" type="button">
                Don&apos;t have an account?
              </Anchor>
            </Stack>
          </form>
        </Card>
      </Center>
    </>
  );
};

export const getServerSideProps: GetServerSideProps<{ errorType?: string }> = async (context) => {
  const session = await getServerAuthSession({
    req: context.req,
    res: context.res,
  });

  if (session) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    };
  }

  const errorType = (context.query.error as string) ?? null;

  if ((context.query.callbackUrl as string)?.endsWith('/login')) {
    return {
      redirect: {
        destination: !errorType ? '/login' : `/login?error=${errorType}`,
        permanent: false,
      },
    };
  }

  const translations = await getServerSideTranslations(
    loginNamespaces,
    context.locale,
    context.req,
    context.res
  );

  return { props: { errorType, ...translations } };
};

export default Login;

const usePageLoadNotification = ({
  enabled,
  ...notificationProps
}: NotificationProps & { enabled: boolean }) => {
  const notificationSendRef = useRef<boolean>(!enabled);

  useEffect(() => {
    if (notificationSendRef.current) return;
    notificationSendRef.current = true;
    showNotification(notificationProps);
  }, []);
};
